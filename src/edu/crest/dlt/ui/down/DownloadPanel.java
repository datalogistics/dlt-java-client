/*******************************************************************************
 * Copyright (c) : See the COPYRIGHT file in top-level/project directory
 *******************************************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.crest.dlt.ui.down;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Logger;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonReader;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

import edu.crest.dlt.exnode.Exnode;
import edu.crest.dlt.exnode.Exnode.service_exnode;
import edu.crest.dlt.exnode.ExnodeBuilder;
import edu.crest.dlt.transfer.MapProgressListener;
import edu.crest.dlt.ui.utils.img.Icons;
import edu.crest.dlt.utils.Configuration;
import edu.crest.dlt.utils.DefaultOuputFileNameGenerater;
import edu.crest.dlt.utils.Status;
import edu.crest.dlt.utils.Status.ui_status;

/**
 * @author Rohit
 */
public class DownloadPanel extends javax.swing.JPanel
{

	private static final Logger log = Logger.getLogger(DownloadPanel.class.getName());

	private Map<String, Exnode> map_filename_exnode;

	/**
	 * Creates new form DownloadPanel
	 */
	public DownloadPanel()
	{
		initComponents();

		panel_transfer_settings.disable();
		new Thread()
		{
			public void run()
			{
				/* obtain exnodes for download */
				obtain_exnodes();

				/* setup obtained exnodes for download */
				setup_exnodes();

				/* publish ready exnodes for download (by filename) */
				publish_downloads();

				panel_transfer_settings.enable();
			}
		}.start();

		new Thread()
		{
			public void run()
			{
				while (true) {
					try {
						synchronized (panel_transfer_settings) {
							/* wait on transfer-settings state-change */
							log.info("transfer-settings listener waiting");
							panel_transfer_settings.wait();
						}

						/* setup obtained exnodes using selected transfer-settings */
						setup_exnodes();
						publish_downloads();
					} catch (InterruptedException e) {
					}
				}
			}
		}.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panel_files = new edu.crest.dlt.ui.down.FilesPanel();
    panel_output_directory = new edu.crest.dlt.ui.down.DirectoryChooserPanel();
    panel_transfer_settings = new edu.crest.dlt.ui.down.TransferSettingsPanel();
    panel_transfer_progress = new edu.crest.dlt.ui.utils.TransferProgressPanel();
    button_download = new javax.swing.JButton();
    button_map_view = new javax.swing.JButton();
    button_cancel = new javax.swing.JButton();
    button_close = new javax.swing.JButton();

    button_download.setIcon(Icons.icon_download);
    button_download.setText("Download");
    button_download.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        button_downloadMouseMoved(evt);
      }
    });
    button_download.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        button_download_clicked(evt);
      }
    });

    button_map_view.setIcon(Icons.icon_map);
    button_map_view.setText("View");
    button_map_view.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        button_map_view_clicked(evt);
      }
    });

    button_cancel.setIcon(Icons.icon_abort);
    button_cancel.setText("Cancel");
    button_cancel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        button_cancel_clicked(evt);
      }
    });

    button_close.setIcon(Icons.icon_failure);
    button_close.setText("Close");
    button_close.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        button_close_clicked(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(button_download)
        .addGap(28, 28, 28)
        .addComponent(button_map_view)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(button_cancel)
        .addGap(18, 18, 18)
        .addComponent(button_close)
        .addContainerGap())
      .addComponent(panel_transfer_settings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(panel_output_directory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(panel_files, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(panel_transfer_progress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(panel_files, javax.swing.GroupLayout.PREFERRED_SIZE, 159, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(panel_output_directory, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(panel_transfer_settings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(panel_transfer_progress, javax.swing.GroupLayout.PREFERRED_SIZE, 181, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(button_close)
            .addComponent(button_cancel)
            .addComponent(button_map_view))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(button_download)
            .addContainerGap())))
    );
  }// </editor-fold>//GEN-END:initComponents

	private void button_downloadMouseMoved(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_downloadMouseMoved
		setup_exnodes();
	}// GEN-LAST:event_button_downloadMouseMoved

	private void button_close_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_close_clicked
		String confirmationMessage = "Are you sure you want to close the window?\nCAUTION: This will terminate all running tasks.";
		int answer = JOptionPane.showConfirmDialog(new JFrame(), confirmationMessage, "",
				JOptionPane.YES_NO_OPTION);
		if (answer == JOptionPane.YES_OPTION) {
			log.info("closing application after user confirmation. (says \"ciao\" ^_^)");
			System.exit(WindowConstants.DISPOSE_ON_CLOSE);
		}
	}// GEN-LAST:event_button_close_clicked

	private void button_cancel_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_cancel_clicked
		String confirmationMessage = "Are you sure you want to cancel the running tasks?\nNOTE: Completed tasks will not be undone.";
		int answer = JOptionPane.showConfirmDialog(new JFrame(), confirmationMessage, "",
				JOptionPane.YES_NO_OPTION);
		if (answer == JOptionPane.YES_OPTION) {
			List<String> files_to_cancel = panel_files.files_selected();
			// int count = files_to_cancel.size();

			for (String file_selected : files_to_cancel) {
				try {
					Exnode exnode_to_cancel = map_filename_exnode.get(file_selected);
					if (exnode_to_cancel == null) {
						throw new Exception("failed to retrieve exnode for file name : " + file_selected);
					}

					panel_files.status_file(file_selected, ui_status.transfer_aborting);//"Cancelling"
					exnode_to_cancel.transfer_cancel();
					panel_files.status_file(file_selected, ui_status.transfer_aborted);//"Cancelled"
					panel_files.deselect_file(file_selected);
				} catch (Exception e) {
				}
				// count--;
			}
			panel_files.deselect_files_all();
			panel_transfer_progress.clear();

			panel_transfer_settings.enable();
			panel_output_directory.enable();
			button_download.setEnabled(true);

			Toolkit.getDefaultToolkit().beep();
		}
	}// GEN-LAST:event_button_cancel_clicked

	private void button_map_view_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_map_view_clicked
		String url_map = Configuration.dlt_ui_progress_map_view_url;
		try {
			Desktop.getDesktop().browse(new URI(url_map));
		} catch (IOException | URISyntaxException e) {
			log.warning("failed to reach " + url_map + ". " + e);
		}
	}// GEN-LAST:event_button_map_view_clicked

	private void button_download_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_download_clicked
		if (panel_output_directory.directory().trim().equals("")) {
			panel_output_directory.directory(DefaultOuputFileNameGenerater.getHomeDirectory());
		}
		final String target_directory = panel_output_directory.directory();

		Thread downloader = new Thread(new Runnable()
		{
			@Override
			public void run()
			{
				panel_transfer_settings.disable();
				panel_output_directory.disable();
				button_download.setEnabled(false);
				List<String> files_to_download = panel_files.files_selected();
				int count_files_to_download = files_to_download.size();

				for (String file_to_download : files_to_download) {
					try {
						Exnode exnode_to_download = map_filename_exnode.get(file_to_download);
						if (exnode_to_download == null) {
							log.severe("failed to retrieve exnode for : " + file_to_download);
							panel_files.status_file(file_to_download, ui_status.transfer_aborted);//"Failed (Metadata)"
							continue;
						}

						long bytes_to_download = exnode_to_download.length();
						String target_file_absolute_path = DefaultOuputFileNameGenerater.getOuputFileName(
								exnode_to_download, target_directory);
						String target_file = file_to_download;
						if (target_file_absolute_path.contains(")")) {
							String[] components_path = target_file_absolute_path.split("\\(");

							String file_extension = DefaultOuputFileNameGenerater.getExtension(file_to_download);
							target_file = file_to_download.substring(0, file_to_download.length()
									- file_extension.length());
							target_file = target_file + "(" + components_path[components_path.length - 1];
						}

						// setTitle(Configuration.bd_ui_title + " (Downloading " +
						// count_files_to_download + ")");

						panel_transfer_progress.clear();
						panel_transfer_progress.filename(target_file);
						panel_transfer_progress.size(bytes_to_download);
						exnode_to_download.add(panel_transfer_progress);

						panel_files.status_file(file_to_download, ui_status.downloading);//"In Progress"
						if (exnode_to_download.read(target_file_absolute_path,
								(int) panel_transfer_settings.transfer_size(),
								panel_transfer_settings.count_connections())) {
							panel_files.status_file(file_to_download, ui_status.transfer_sucess);//"Done"
						} else {
							ui_status previousStatus = panel_files.status_file(file_to_download);
							if (ui_status.downloading == previousStatus) {
								panel_files.status_file(file_to_download, ui_status.transfer_failed);//"Failed"
							} else if (ui_status.transfer_aborting == previousStatus || ui_status.transfer_aborted == previousStatus) {
								panel_files.status_file(file_to_download, ui_status.transfer_aborted);//"Cancelled"
							}
						}
					} catch (Exception e) {
						log.warning("failed to download " + file_to_download + ". " + e.getMessage());
						panel_files.status_file(file_to_download, ui_status.transfer_failed);//"Failed"
					}

					count_files_to_download--;
					panel_files.deselect_file(file_to_download);
				}

				// setTitle(Configuration.bd_ui_title + " (Download)");

				panel_files.deselect_files_all();
				panel_transfer_settings.enable();
				panel_output_directory.enable();
				button_download.setEnabled(true);

				Toolkit.getDefaultToolkit().beep();
			}
		});

		downloader.start();
	}// GEN-LAST:event_button_download_clicked

	private Map<String, ArrayList<URL>> obtain_local_exnodes_get_urls()
	{
		Map<String, ArrayList<URL>> hostNRefIdDict = new HashMap<String, ArrayList<URL>>();
		for (String file_path : Configuration.dlt_file_paths) {
			/* if the path is an http url */
			if (file_path.startsWith("http://") || file_path.startsWith("https://")) {
				try {
					URL file_url = new URL(file_path);
					if (hostNRefIdDict.containsKey(file_url.getHost())) {
						hostNRefIdDict.get(file_url.getHost()).add(file_url);
					} else {
						ArrayList<URL> urlList = new ArrayList<URL>();
						urlList.add(file_url);
						hostNRefIdDict.put(file_url.getHost(), urlList);
					}
				} catch (MalformedURLException ex) {
					log.warning("malformed file url : " + file_path);
					map_filename_exnode.put(file_path, null);
				}
				/* or if the path is an .xnd file */
			} else if (file_path.endsWith(".xnd")) {
				Exnode exnode;
				try {
					exnode = ExnodeBuilder.xnd(file_path);
					map_filename_exnode.put(exnode.filename(), exnode);
				} catch (Exception e) {
					log.warning("failed to extract exnode from file : " + file_path + ". " + e);
				}
				/* or if the path is an .uef file */
			} else if (file_path.endsWith(".uef")) {
				Exnode exnode;
				try {
					exnode = ExnodeBuilder.uef(file_path);
					map_filename_exnode.put(exnode.filename(), exnode);
				} catch (Exception e) {
					log.warning("failed to extract exnode from file : " + file_path + ". " + e);
				}
			} else {
				log.warning("invalid file path/extension : " + file_path);
				map_filename_exnode.put(file_path, null);
			}
		}
		return hostNRefIdDict;
	}

	private void obtain_exnodes()
	{
		map_filename_exnode = new HashMap<String, Exnode>();
		Map<String, ArrayList<URL>> hostNRefIdDict = obtain_local_exnodes_get_urls();

		List<String> session_ids = new ArrayList<String>();
		for (Map.Entry<String, ArrayList<URL>> resourceUrls : hostNRefIdDict.entrySet()) {

			ArrayList<URL> urls = (ArrayList<URL>) resourceUrls.getValue();
			ArrayList<URL> urls_stripped = new ArrayList<URL>();
			Map<String, StringBuffer> urls_concatenated = new HashMap<String, StringBuffer>();

			for (URL url : urls) {
				String hostPort = url.getHost() + ":" + url.getPort();
				/* Strip the visualization session id's */
				String query = url.getQuery();
				String[] components = query != null ? query.split("=") : null;
				if (components != null && components.length >= 2) {
					for (int c = 0; c < components.length; c++) {
						if (components[c].equals("sid") && ((c + 1) < components.length)) {
							session_ids.add(components[c + 1]);
							break;
						}
					}
				}

				/* if new host:port */
				if (!urls_concatenated.containsKey(hostPort)) {
					StringBuffer url_concatenated = new StringBuffer();
					url_concatenated.append(url.getProtocol()).append("://");

					String exnodeRelativePath = url.getPath();
					components = exnodeRelativePath.split("/");
					if (components.length >= 3) {
						url_concatenated.append(hostPort).append("/").append(components[1]);
						url_concatenated.append("?id=").append(components[2]);
					}

					urls_concatenated.put(hostPort, url_concatenated);

				} else { /* concatenate URL's (requests) destined to same host:port */
					String exnodeRelativePath = url.getPath();
					components = exnodeRelativePath.split("/");
					if (components.length >= 3) {
						urls_concatenated.get(hostPort).append("|id=").append(components[2]);
					}
				}

				try {
					urls_stripped.add(new URL(url.getProtocol() + "://" + hostPort + url.getPath()));
				} catch (MalformedURLException e1) {
					log.warning("invalid url formed : " + url.getProtocol() + "://" + hostPort
							+ url.getPath());
				}
			}

			/**
			 * TODO: if only part of the concatenated URL produces into valid exnodes
			 * only those are shown on the files panel; the failed ones are ignored.
			 * but if concatenated URL's fail, then all stripped url's are tried and
			 * the failed URL's will be shown on files panel
			 */
			boolean url_concatenated_supported = true;
			for (Entry<String, StringBuffer> hostUrl : urls_concatenated.entrySet()) {
				List<Exnode> exnodes = url(hostUrl.getValue().toString());
				if (exnodes.size() == 0) {
					url_concatenated_supported = false;
					break;
				}
				for (Exnode exnode : exnodes) {
					String session_id = session_ids.size() > 0 ? session_ids.remove(0) : "";
					exnode.add(new MapProgressListener(session_id, exnode, this));
					map_filename_exnode.put(exnode.filename(), exnode);
				}
			}
			if (!url_concatenated_supported) {
				for (URL url : urls_stripped) {
					List<Exnode> exnodes = url(url.toString());

					if (exnodes == null || exnodes.isEmpty()) {
						map_filename_exnode.put(url.getPath(), null);
						continue;
					}

					for (Exnode exnode : exnodes) {
						String session_id = session_ids.size() > 0 ? session_ids.remove(0) : "";
						exnode.add(new MapProgressListener(session_id, exnode, this));
						map_filename_exnode.put(exnode.filename(), exnode);
					}
				}
			}
		}
	}

	private void setup_exnodes()
	{
		for (Map.Entry<String, Exnode> entry : map_filename_exnode.entrySet()) {
			if (entry.getValue() != null) {
				entry.getValue().setup_read(panel_transfer_settings.transfer_size());
			}
		}
	}

	private void publish_downloads()
	{
		panel_files.remove_files_all();

		for (Map.Entry<String, Exnode> entry : map_filename_exnode.entrySet()) {
			if (entry.getValue() == null) {
				/* if exnode not found, fail the file-"path" */
				panel_files.add_file(entry.getKey(), ui_status.metadata_error);//"Metadata error");
			} else {
				/* if exnode is not in ready state yet, */
				if (!entry.getValue().accessible(service_exnode.read)) {
					try {
						/* wait for connection-setup timeout */
						Thread.sleep(Configuration.dlt_depot_connect_timeout);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				if (!entry.getValue().accessible(service_exnode.read)) {
					/* if exnode is still not ready, fail the file-"name" */
					panel_files.add_file(entry.getKey(), ui_status.mappings_inaccessible);//"Connect error");
				} else {
					/* else publish file-"name" for download */
					panel_files.add_file(entry.getKey(), ui_status.download_ready);//"Ready");
				}
			}
			// panel_files.add_file(entry.getKey(), (entry.getValue() != null ?
			// "Ready" : "Failed"));
		}
	}

	public List<Exnode> url(String url_string)
	{
		List<Exnode> exnodes = new ArrayList<Exnode>();

		URL url;
		try {
			url = new URL(url_string);
		} catch (MalformedURLException e3) {
			log.warning("malformed exnode url : " + url_string);
			return exnodes;
		}

		Exnode exnode = null;
		if (url_string.contains("|")) { /* if expecting an array of JSON objects */
			try {
				JsonReader json_reader = Json.createReader(url.openStream());
				JsonArray json_exnodes = json_reader.readArray();

				for (int i = 0; i < json_exnodes.size(); i++) {
					exnode = Exnode.json(json_exnodes.getJsonObject(i));
					exnodes.add(exnode);
				}
			} catch (Exception e) {
			}
		} else { /* else if expecting a single JSON object */
			try {
				exnode = ExnodeBuilder.xnd(url);
			} catch (Exception e1) {
				try {
					exnode = ExnodeBuilder.uef(url);
				} catch (Exception e2) {
					e2.printStackTrace();
					log.warning("failed to obtain exnode from url : " + url_string);
				}
			}
			if (exnode != null) {
				exnodes.add(exnode);
			}
		}
		return exnodes;
	}

	public int transfer_settings_connections()
	{
		return panel_transfer_settings.count_connections();
	}

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton button_cancel;
  private javax.swing.JButton button_close;
  private javax.swing.JButton button_download;
  private javax.swing.JButton button_map_view;
  private edu.crest.dlt.ui.down.FilesPanel panel_files;
  private edu.crest.dlt.ui.down.DirectoryChooserPanel panel_output_directory;
  private edu.crest.dlt.ui.utils.TransferProgressPanel panel_transfer_progress;
  private edu.crest.dlt.ui.down.TransferSettingsPanel panel_transfer_settings;
  // End of variables declaration//GEN-END:variables
}
