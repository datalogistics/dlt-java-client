/*******************************************************************************
 * Copyright (c) : See the COPYRIGHT file in top-level/project directory
 *******************************************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.crest.dlt.ui.down;

import java.util.Map;
import java.util.logging.Logger;

import edu.crest.dlt.ibp.Depot;
import edu.crest.dlt.ui.utils.img.Icons;
import edu.crest.dlt.utils.Configuration;

public class TransferSettingsPanel extends javax.swing.JPanel
{
	private static final Logger log = Logger.getLogger(TransferSettingsPanel.class.getClass()
			.getName());

	/**
	 * Creates new form TransferSettingsPanel
	 */
	public TransferSettingsPanel()
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		label_connection_type = new javax.swing.JLabel();
		input_connection_type = new javax.swing.JSpinner();
		label_block_size = new javax.swing.JLabel();
		input_block_size = new javax.swing.JComboBox();
		input_block_unit = new javax.swing.JSpinner();
		label_connection_count = new javax.swing.JLabel();
		input_connection_count = new javax.swing.JComboBox();
		button_reconnect = new javax.swing.JButton();

		setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Transfer Settings",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

		label_connection_type.setText("Connection Type");

		input_connection_type.setModel(new javax.swing.SpinnerListModel(new String[] { "Dial-Up/ISDN",
				"DSL/Cable/T1", "< 100 Mbps", "> 100 Mbps" }));
		input_connection_type.setEditor(new javax.swing.JSpinner.ListEditor(input_connection_type));
		input_connection_type.addChangeListener(new javax.swing.event.ChangeListener()
		{
			public void stateChanged(javax.swing.event.ChangeEvent evt)
			{
				input_connection_type_changed(evt);
			}
		});

		label_block_size.setText("Block Size");

		input_block_size.setEditable(true);
		input_block_size.setMaximumRowCount(15);
		input_block_size.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4",
				"5", "8", "10", "16", "32", "64", "128", "256", "512", "1024" }));
		input_block_size.setSelectedItem(512);
		input_block_size.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				input_block_size_changed(evt);
			}
		});

		input_block_unit.setModel(new javax.swing.SpinnerListModel(new String[] { "KB", "MB" }));
		input_block_unit.addChangeListener(new javax.swing.event.ChangeListener()
		{
			public void stateChanged(javax.swing.event.ChangeEvent evt)
			{
				input_block_unit_changed(evt);
			}
		});

		label_connection_count.setText("# of Connections");

		input_connection_count.setEditable(true);
		input_connection_count.setMaximumRowCount(10);
		input_connection_count.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2",
				"3", "4", "5", "6", "7", "8", "9", "10" }));
		input_connection_count.setSelectedIndex(5);
		input_connection_count.setSelectedItem(1);
		input_connection_count.setToolTipText("");

		button_reconnect.setIcon(Icons.icon_refresh);
		button_reconnect.setText("Reconnect");
		button_reconnect.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				button_reconnect_clicked(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(label_connection_type)
														.addComponent(label_block_size, javax.swing.GroupLayout.PREFERRED_SIZE,
																81, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(input_connection_type,
																				javax.swing.GroupLayout.PREFERRED_SIZE, 274,
																				javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap())
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(input_block_size,
																				javax.swing.GroupLayout.PREFERRED_SIZE, 70,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(input_block_unit,
																				javax.swing.GroupLayout.PREFERRED_SIZE, 53,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(18, 18, 18)
																		.addComponent(label_connection_count)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(input_connection_count,
																				javax.swing.GroupLayout.PREFERRED_SIZE, 57,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29,
																				Short.MAX_VALUE).addComponent(button_reconnect)))));
		layout
				.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(label_connection_type)
														.addComponent(input_connection_type,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(label_connection_count,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(label_block_size, javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(input_block_unit, javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(input_block_size, javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(input_connection_count,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(button_reconnect))));
	}// </editor-fold>//GEN-END:initComponents

	private void button_reconnect_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_reconnect_clicked
		disable(true);
		for (Map.Entry<String, Depot> depot_entry : Depot.depots.entrySet()) {
			depot_entry.getValue().setup();
		}
		synchronized (this) {
			this.notify();
		}
		enable();
	}// GEN-LAST:event_button_reconnect_clicked

	private void input_connection_type_changed(javax.swing.event.ChangeEvent evt)
	{// GEN-FIRST:event_input_connection_type_changed
		String connection_type_selected = (String) input_connection_type.getValue();
		if (connection_type_selected.equals("Dial-Up/ISDN")) {
			input_block_size.setSelectedItem(512);
			input_block_unit.setValue("KB");
			input_connection_count.setSelectedItem(1);
		} else if (connection_type_selected.equals("DSL/Cable/T1")) {
			input_block_size.setSelectedItem(1024);
			input_block_unit.setValue("KB");
			input_connection_count.setSelectedItem(3);
		} else if (connection_type_selected.equals("< 100 Mbps")) {
			input_block_size.setSelectedItem(2);
			input_block_unit.setValue("MB");
			input_connection_count.setSelectedItem(6);
		} else if (connection_type_selected.equals("> 100 Mbps")) {
			input_block_size.setSelectedItem(10);
			input_block_unit.setValue("MB");
			input_connection_count.setSelectedItem(10);
		}
	}// GEN-LAST:event_input_connection_type_changed

	private void input_block_size_changed(java.awt.event.ActionEvent evt)
	{// GEN-FIRST:event_input_block_size_changed
		transfer_size_validate();
	}// GEN-LAST:event_input_block_size_changed

	private void input_block_unit_changed(javax.swing.event.ChangeEvent evt)
	{// GEN-FIRST:event_input_block_unit_changed
		transfer_size_validate();
	}// GEN-LAST:event_input_block_unit_changed

	private void transfer_size_validate()
	{
		long size;
		try {
			String block_size_units = (String) input_block_unit.getValue();
			long block_size = Long.parseLong(input_block_size.getSelectedItem().toString());
			long multiplier = block_size_units.equals("KB") ? 1024
					: (block_size_units.equals("MB") ? (1024 * 1024) : 1);
			size = block_size * multiplier;
		} catch (NumberFormatException e) {
			log.warning("failed to read input block size; defaulting to "
					+ Configuration.dlt_exnode_transfer_size_default);
			size = Configuration.dlt_exnode_transfer_size_default;
		}

		if (size > 10 * 1024 * 1024 || size <= 0) {
			log.warning("unsupported transfer size of " + size + " bytes; defaulting to "
					+ Configuration.dlt_exnode_transfer_size_default);
			size = Configuration.dlt_exnode_transfer_size_default;
		}

		if (size / 1024 > 1) {
			if (size / (1024 * 1024) > 1) {
				input_block_size.setSelectedItem(size / (1024 * 1024));
				input_block_unit.setValue("MB");
			} else {
				input_block_size.setSelectedItem(size / 1024);
				input_block_unit.setValue("KB");
			}
		}
	}

	public long transfer_size()
	{
		transfer_size_validate();
		String block_size_units = (String) input_block_unit.getValue();
		Long block_size = Long.parseLong(input_block_size.getSelectedItem().toString());
		long multiplier = block_size_units.equals("KB") ? 1024
				: (block_size_units.equals("MB") ? (1024 * 1024) : 1);
		return block_size * multiplier;
	}

	public int count_connections()
	{
		return Integer.parseInt(input_connection_count.getSelectedItem().toString());
	}

	public void enable()
	{
		input_block_size.setEnabled(true);
		input_block_unit.setEnabled(true);
		input_connection_count.setEnabled(true);
		input_connection_type.setEnabled(true);
		button_reconnect.setEnabled(true);
		button_reconnect.setIcon(Icons.icon_refresh);
	}

	public void disable()
	{
		disable(false);
	}

	public void disable(boolean is_processing)
	{
		input_block_size.setEnabled(false);
		input_block_unit.setEnabled(false);
		input_connection_count.setEnabled(false);
		input_connection_type.setEnabled(false);
		button_reconnect.setEnabled(false);
		if (is_processing) {
			button_reconnect.setIcon(Icons.icon_processing(button_reconnect));
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton button_reconnect;
	private javax.swing.JComboBox input_block_size;
	private javax.swing.JSpinner input_block_unit;
	private javax.swing.JComboBox input_connection_count;
	private javax.swing.JSpinner input_connection_type;
	private javax.swing.JLabel label_block_size;
	private javax.swing.JLabel label_connection_count;
	private javax.swing.JLabel label_connection_type;
	// End of variables declaration//GEN-END:variables
}
