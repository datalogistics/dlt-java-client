/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.crest.dlt.ui.up;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Rohit
 */
public class FilesPanel extends javax.swing.JPanel
{
	private static final Logger log = Logger.getLogger(FilesPanel.class.getClass().getName());

	/**
	 * Creates new form FilesPanel
	 */
	public FilesPanel()
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		scrollpane_files = new javax.swing.JScrollPane();
		table_files = new javax.swing.JTable();
		button_select_all = new javax.swing.JButton();
		button_deselect_all = new javax.swing.JButton();
		button_add = new javax.swing.JButton();
		button_remove = new javax.swing.JButton();

		setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Files",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

		table_files.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "[]", "File(s)", "Status" })
		{
			Class[] types = new Class[] { java.lang.Boolean.class, java.lang.String.class,
					java.lang.String.class };
			boolean[] canEdit = new boolean[] { true, false, false };

			public Class getColumnClass(int columnIndex)
			{
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex)
			{
				return canEdit[columnIndex];
			}
		});
		table_files.setColumnSelectionAllowed(true);
		table_files.setFillsViewportHeight(true);
		table_files.setShowHorizontalLines(false);
		table_files.setShowVerticalLines(false);
		table_files.getTableHeader().setReorderingAllowed(false);
		scrollpane_files.setViewportView(table_files);
		table_files.getColumnModel().getSelectionModel()
				.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		if (table_files.getColumnModel().getColumnCount() > 0) {
			table_files.getColumnModel().getColumn(0).setMinWidth(20);
			table_files.getColumnModel().getColumn(0).setPreferredWidth(20);
			table_files.getColumnModel().getColumn(0).setMaxWidth(20);
			table_files.getColumnModel().getColumn(1).setResizable(false);
			table_files.getColumnModel().getColumn(2).setMinWidth(75);
			table_files.getColumnModel().getColumn(2).setPreferredWidth(120);
			table_files.getColumnModel().getColumn(2).setMaxWidth(150);
		}

		button_select_all.setText("Select All");
		button_select_all.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				button_select_all_clicked(evt);
			}
		});

		button_deselect_all.setText("Deselect All");
		button_deselect_all.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				button_deselect_all_clicked(evt);
			}
		});

		button_add.setText("Add");
		button_add.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				button_add_clicked(evt);
			}
		});

		button_remove.setText("Remove");
		button_remove.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				button_remove_clicked(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout
								.createSequentialGroup()
								.addComponent(button_select_all)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(button_deselect_all)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192,
										Short.MAX_VALUE).addComponent(button_add)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(button_remove)).addComponent(scrollpane_files));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout
								.createSequentialGroup()
								.addComponent(scrollpane_files, javax.swing.GroupLayout.PREFERRED_SIZE, 123,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(button_add).addComponent(button_remove)
												.addComponent(button_select_all).addComponent(button_deselect_all))));
	}// </editor-fold>//GEN-END:initComponents

	private void button_select_all_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_select_all_clicked
		select_files_all();
	}// GEN-LAST:event_button_select_all_clicked

	private void button_deselect_all_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_deselect_all_clicked
		deselect_files_all();
	}// GEN-LAST:event_button_deselect_all_clicked

	private void button_add_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_add_clicked
		JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setMultiSelectionEnabled(true);
		int result = chooser.showOpenDialog(null);

		if (result == JFileChooser.APPROVE_OPTION) {
			List<String> files = file_paths(chooser.getSelectedFiles());
			add_files(files, "Ready");

			synchronized (this) {
				this.notify();
			}
		}
	}// GEN-LAST:event_button_add_clicked

	private void button_remove_clicked(java.awt.event.MouseEvent evt)
	{// GEN-FIRST:event_button_remove_clicked
		List<String> files_selected = files_selected();

		if (files_selected != null && files_selected.size() > 0) {
			String confirmationMessage = "Are you sure you want to remove the selected files from the files-list?\nNOTE: This will prevent you from taking any further action on them.";
			int answer = JOptionPane.showConfirmDialog(new JFrame(), confirmationMessage, "",
					JOptionPane.YES_NO_OPTION);

			if (answer == JOptionPane.YES_OPTION) {
				remove_files_selected();

				synchronized (this) {
					this.notify();
				}
			}
		}
	}// GEN-LAST:event_button_remove_clicked

	private List<String> file_paths(File[] files)
	{
		List<String> file_paths = new ArrayList<String>();

		for (File file : files) {
			file_paths.addAll(file_paths(file));
		}

		return file_paths;
	}

	private List<String> file_paths(File file)
	{
		List<String> file_paths = new ArrayList<String>();

		if (file.isDirectory()) {
			for (File _file : file.listFiles()) {
				if (_file.isDirectory()) {
					file_paths.addAll(file_paths(_file));
				} else if (_file.isFile()) {
					file_paths.add(_file.getAbsolutePath());
				}
			}
		} else if (file.isFile()) {
			file_paths.add(file.getAbsolutePath());
		}

		return file_paths;
	}

	public void add_file(String filename, String status)
	{
		DefaultTableModel table_files_model = (DefaultTableModel) table_files.getModel();
		table_files_model.addRow(new Object[] { false, filename, status });
	}

	public void add_files(List<String> files, String status)
	{
		for (String file : files) {
			add_file(file, status);
		}
	}

	public int index_file(String filename)
	{
		TableModel table_files_model = table_files.getModel();
		if (filename != null) {
			for (int row = 0; row < table_files_model.getRowCount(); row++) {
				if (filename.equals(table_files_model.getValueAt(row, column_index_file))) {
					return row;
				}
			}
		}
		return -1;
	}

	public String status_file(String filename)
	{
		int index_file = index_file(filename);
		if (index_file == -1) {
			return null;
		}
		TableModel table_files_model = table_files.getModel();
		return (String) table_files_model.getValueAt(index_file, column_index_status);
	}

	public void status_file(String filename, String status)
	{
		int row_file = index_file(filename);
		if (row_file != -1) {
			TableModel table_files_model = table_files.getModel();
			log.info((String) table_files_model.getValueAt(row_file, column_index_file)
					+ " status change : "
					+ (String) table_files_model.getValueAt(row_file, column_index_status) + " ~> " + status);
			table_files_model.setValueAt(status, row_file, column_index_status);
		}
	}

	public List<String> files_selected()
	{
		List<String> files_selected = new ArrayList<String>();
		TableModel table_files_model = table_files.getModel();
		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			if (Boolean.TRUE.equals(table_files_model.getValueAt(row, column_index_checkbox))) {
				files_selected.add((String) table_files_model.getValueAt(row, column_index_file));
				log.info((String) table_files_model.getValueAt(row, column_index_file) + " is selected.");
			}
		}
		return files_selected;
	}

	public List<String> files()
	{
		List<String> files_published = new ArrayList<String>();
		TableModel table_files_model = table_files.getModel();
		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			files_published.add((String) table_files_model.getValueAt(row, column_index_file));
			log.info((String) table_files_model.getValueAt(row, column_index_file) + " is published.");
		}
		return files_published;
	}

	public void select_file(String filename)
	{
		if (filename == null) {
			return;
		}

		TableModel table_files_model = table_files.getModel();
		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			if (!filename.equals("all")) {
				String filename_i = (String) table_files_model.getValueAt(row, column_index_file);
				if (!filename.equals(filename_i)) {
					continue;
				}
			}

			if (Boolean.FALSE.equals(table_files_model.getValueAt(row, column_index_checkbox))) {
				table_files_model.setValueAt(true, row, column_index_checkbox);
				log.info((String) table_files_model.getValueAt(row, column_index_file) + " selected.");
				break;
			}
		}
	}

	public void select_files(List<String> filenames)
	{
		if (filenames == null || filenames.size() == 0) {
			return;
		}

		TableModel table_files_model = table_files.getModel();
		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			String filename_i = (String) table_files_model.getValueAt(row, column_index_file);
			if (!filenames.contains(filename_i)) {
				continue;
			}

			if (Boolean.FALSE.equals(table_files_model.getValueAt(row, column_index_checkbox))) {
				table_files_model.setValueAt(false, row, column_index_checkbox);
				log.info((String) table_files_model.getValueAt(row, column_index_file) + " deselected.");
			}
		}
	}

	public void select_files_all()
	{
		select_file("all");
	}

	public void select_files_selected()
	{
		select_files(files_selected());
	}

	public void deselect_file(String filename)
	{
		if (filename == null) {
			return;
		}

		TableModel table_files_model = table_files.getModel();
		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			if (!filename.equals("all")) {
				String filename_i = (String) table_files_model.getValueAt(row, column_index_file);
				if (!filename.equals(filename_i)) {
					continue;
				}
			}

			if (Boolean.TRUE.equals(table_files_model.getValueAt(row, column_index_checkbox))) {
				table_files_model.setValueAt(false, row, column_index_checkbox);
				log.info((String) table_files_model.getValueAt(row, column_index_file) + " deselected.");
				break;
			}
		}
	}

	public void deselect_files(List<String> filenames)
	{
		if (filenames == null || filenames.size() == 0) {
			return;
		}

		TableModel table_files_model = table_files.getModel();
		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			String filename_i = (String) table_files_model.getValueAt(row, column_index_file);
			if (!filenames.contains(filename_i)) {
				continue;
			}

			if (Boolean.TRUE.equals(table_files_model.getValueAt(row, column_index_checkbox))) {
				table_files_model.setValueAt(false, row, column_index_checkbox);
				log.info((String) table_files_model.getValueAt(row, column_index_file) + " deselected.");
			}
		}
	}

	public void deselect_files_all()
	{
		deselect_file("all");
	}

	public void deselect_files_selected()
	{
		deselect_files(files_selected());
	}

	public void remove_file(String filename)
	{
		if (filename == null) {
			return;
		}

		TableModel table_files_model = table_files.getModel();
		DefaultTableModel table_files_model_default = (DefaultTableModel) table_files_model;

		if (filename.equals("all")) {
			table_files_model_default.setRowCount(0);
		}

		for (int row = 0; row < table_files_model.getRowCount(); row++) {
			if (!filename.equals("all")) {
				String filename_i = (String) table_files_model.getValueAt(row, column_index_file);
				if (!filename.equals(filename_i)) {
					continue;
				}
			}

			if (filename.equals(table_files_model.getValueAt(row, column_index_file))) {
				log.info((String) table_files_model.getValueAt(row, column_index_file) + " removed.");
				table_files_model_default.removeRow(row);
				break;
			}
		}
	}

	public void remove_files_all()
	{
		remove_file("all");
	}

	public void remove_files_selected()
	{
		for (String file_selected : files_selected()) {
			remove_file(file_selected);
		}
	}

	public void disable()
	{
		button_select_all.setEnabled(false);
		button_deselect_all.setEnabled(false);
		button_add.setEnabled(false);
		button_remove.setEnabled(false);
	}

	public void enable()
	{
		button_select_all.setEnabled(true);
		button_deselect_all.setEnabled(true);
		button_add.setEnabled(true);
		button_remove.setEnabled(true);
	}

	private static final int column_index_checkbox = 0;
	private static final int column_index_file = 1;
	private static final int column_index_status = 2;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton button_add;
	private javax.swing.JButton button_deselect_all;
	private javax.swing.JButton button_remove;
	private javax.swing.JButton button_select_all;
	private javax.swing.JScrollPane scrollpane_files;
	public javax.swing.JTable table_files;
	// End of variables declaration//GEN-END:variables
}
